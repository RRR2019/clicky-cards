{"version":3,"sources":["components/Header/index.js","components/Navbar/index.js","components/Cards/index.js","App.js","index.js"],"names":["Header","className","id","Navbar","props","href","score","topScore","Cards","role","aria-label","name","onClick","clicky","App","state","characters","shuffleCharacters","i","length","j","Math","floor","random","temp","setState","notClicked","newCharacters","map","character","clicked","rightGuess","alert","reset","trueArray","push","console","log","resetCharacters","this","Component","ReactDOM","render","document","getElementById"],"mappings":"ozBAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,aACf,wBAAIA,UAAU,0CAA0CC,GAAG,SAA3D,2BACA,wBAAID,UAAU,SACd,uBAAGA,UAAU,gCAAgCC,GAAG,OAAhD,8E,MCeWC,MApBf,SAAgBC,GACd,OACE,yBAAKH,UAAU,sCACf,uBAAGA,UAAU,eAAeI,KAAK,IAAIH,GAAG,UAAxC,eAEA,yBAAKD,UAAU,2BAA2BC,GAAG,qBAC3C,wBAAID,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,GAAG,SAA3B,UAA2CE,EAAME,MAAM,0BAAML,UAAU,WAAhB,eAEzD,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,GAAG,YAA3B,cAAkDE,EAAMG,e,MCHnDC,MANf,SAAeJ,GACb,OACI,yBAAKK,KAAK,MAAMC,aAAW,aAAaT,UAAU,aAAaC,GAAIE,EAAMO,KAAMC,QAAS,kBAAMR,EAAMS,OAAOT,EAAMF,Q,OC4FxGY,E,2MAzFbC,MAAQ,CACJC,aACAV,MAAO,EACPC,SAAU,G,EAIfU,kBAAmB,SAAAD,GAEhB,IADA,IAAIE,EAAIF,EAAWG,OAAS,EACpBD,EAAI,EAAGA,IAAK,CAClB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOR,EAAWE,GACxBF,EAAWE,GAAKF,EAAWI,GAC3BJ,EAAWI,GAAKI,EAGlB,EAAKC,SAAU,CAACT,gB,EAGpBH,OAAQ,SAAAX,GACN,IAAIwB,GAAa,EACXC,EAAgB,EAAKZ,MAAMC,WAAWY,KAAK,SAAAC,GAO/C,OANGA,EAAU3B,KAAOA,IACd2B,EAAUC,UACVD,EAAUC,SAAQ,EAClBJ,GAAa,IAGZG,KAGNH,EACD,EAAKK,WAAWJ,IAGhBK,MAAM,eACN,EAAKC,MAAMN,K,EAIfI,WAAa,SAAAJ,GAEX,IADA,IAAIO,EAAU,GACNhB,EAAE,EAAGA,EAAES,EAAcR,OAAQD,IAChCS,EAAcT,GAAGY,SAClBI,EAAUC,KAAKR,EAAcT,IAGjCkB,QAAQC,IAAIH,GACU,KAAnBA,EAAUf,QACXa,MAAM,cACN,EAAKC,MAAMN,KAGb,EAAKF,SAAU,CAAEnB,MAAO,EAAKS,MAAMT,MAAQ,IAE3C,EAAKW,kBAAkBU,IACpB,EAAKZ,MAAMT,MAAQ,EAAKS,MAAMR,UAAY,EAAKQ,MAAMT,QAAQ,EAAKS,MAAMR,WACzE,EAAKkB,SAAS,CAAClB,SAAU,EAAKQ,MAAMT,MAAQ,M,EAKhD2B,MAAQ,SAAAN,GACN,IAAMW,EAAkBX,EAAcC,KAAI,SAAAC,GAExC,OADAA,EAAUC,SAAU,EACbD,KAGT,EAAKZ,kBAAkBqB,GACvB,EAAKb,SAAS,CAACnB,MAAO,K,wEAIZ,IAAD,OACP,OAAQ,6BACA,kBAAC,EAAD,CAAQA,MAAOiC,KAAKxB,MAAMT,MAAOC,SAAUgC,KAAKxB,MAAMR,WACtD,kBAAC,EAAD,MACA,8BACA,yBAAKN,UAAU,mBACdsC,KAAKxB,MAAMC,WAAWY,KAAI,SAAAC,GAAS,OACpC,kBAAC,EAAD,CAAOlB,KAAMkB,EAAUlB,KAAMT,GAAI2B,EAAU3B,GAAIW,OAAQ,EAAKA,mB,GAlFtD2B,aCJlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.af285f76.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return(\n    <div className=\"jumbotron\">\n    <h1 className=\"display-4 d-flex justify-content-center\" id=\"title\">The Office Clicky Game!</h1>\n    <hr className=\"my-4\"/>\n    <p className=\"d-flex justify-content-center\" id=\"sub\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg sticky-top\">\n    <a className=\"navbar-brand\" href=\"#\" id=\"clicky\">Clicky-Game</a>\n\n    <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item active\">\n          <a className=\"nav-link\" id=\"score\">Score: {props.score}<span className=\"sr-only\">(current)</span></a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" id=\"topScore\">Top Score: {props.topScore}</a>\n        </li>\n        \n      </ul>\n    </div>\n  </nav>\n)\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nimport \"./style.css\";\n\n\nfunction Cards(props) {\n  return (\n      <div role=\"img\" aria-label=\"click item\" className=\"click-item\" id={props.name} onClick={() => props.clicky(props.id)}></div>\n  )\n}\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport Cards from \"./components/Cards\";\nimport characters from \"./characters.json\";\n\n\n\nclass App extends Component {\n\n  state = {\n      characters,\n      score: 0,\n      topScore: 0,\n  };\n  \n//Shuffle code based on: https://stackoverflow.com/questions/38101522/how-to-render-random-objects-from-an-array-in-react\n shuffleCharacters= characters => {\n    let i = characters.length - 1;\n    for (i; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = characters[i];\n      characters[i] = characters[j];\n      characters[j] = temp;\n      \n    }\n    this.setState ({characters});  \n}\n\nclicky= id =>{\n  let notClicked = false;\n  const newCharacters = this.state.characters.map( character =>{\n    if(character.id === id){\n      if(!character.clicked){\n          character.clicked=true;\n          notClicked = true;\n      }\n    }\n    return character\n  });\n\n  if(notClicked){\n    this.rightGuess(newCharacters);\n  }\n  else{\n    alert(\"YOU LOST :(\")\n    this.reset(newCharacters)\n  }\n}\n\nrightGuess = newCharacters =>{\n  let trueArray=[];\n  for(let i=0; i<newCharacters.length; i ++){\n    if(newCharacters[i].clicked){\n      trueArray.push(newCharacters[i])\n    }\n  }\n  console.log(trueArray)\n  if(trueArray.length===12){\n    alert(\"You Win :)\")\n    this.reset(newCharacters)\n  }\n  else{\n  this.setState ({ score: this.state.score + 1 });\n\n  this.shuffleCharacters(newCharacters)\n  if(this.state.score > this.state.topScore || this.state.score===this.state.topScore ){\n    this.setState({topScore: this.state.score + 1})\n  }\n}\n}\n\nreset = newCharacters =>{\n  const resetCharacters = newCharacters.map(character => {\n    character.clicked = false;\n    return character;\n  })\n  \n  this.shuffleCharacters(resetCharacters)\n  this.setState({score: 0})\n}\n\n\n  render() {\n    return (<div>\n            <Navbar score={this.state.score} topScore={this.state.topScore} />\n            <Header />\n            <main>\n            <div className=\"container col-9\">\n            {this.state.characters.map(character =>(\n            <Cards name={character.name} id={character.id} clicky={this.clicky}/>\n            ))}\n            </div>\n            </main>\n            </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}